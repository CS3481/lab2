#For this problem, you'll create a makefile from scratch.
#Use the makefile you created for problem 1 as a reference.
#
#1) Add macros for the compiler and compiler flags.
#   The compiler is g++.  The compiler flags are -c -std=c++11 -Wall -g
#
#2) Add a macro for the object files that should be linked together
#   to create the executable. There will be one object file (.o) for
#   each source file (.C)
#  
#3) Add a macro for the targets. You'll have a makeVehicles target (the
#   executable), a target for each .o (one .o for each .C), a clean
#   target, a run target, and a help target.
#
#4) Add suffix rule that specifies how to create a .o out of a .C file.
#   It should use your CC and CFLAGS macros.
#
#5) Add a line to the makefile for each .o target. 
#   You'll need to look in the corresponding C file to
#   see what .h files it includes. Those .h files (excluding the ones
#   in angled brackets) will be the dependences. The header files
#   can go in any order in the list of dependences.  The .o target lines
#   can go in any order in the makefile.
#
#6) Add the executable target to the makefile. Remember the executable
#   is dependent upon the object (.o) files. Call the executable
#   makeVehicles. (If you call it something else, then make won't be
#   able to figure out the link step.)
#
#7) Add a run target. (See program 1 makefile as an example.) 
#
#8) Add a help target. (See program 1 makefile as an example.) Be
#   sure to use your targets macro. The help target should be the 
#   first target in the makefile.  (The remaining targets can be in
#   any order.)
#
#9) Add a clean target.
#
#10) Try your makefile out. Use the touch command to change the dates
#    on various files and then run make with the appropriate target to
#    make sure it works. 
#
#Note: Make the sure the makefile doesn't contain unnecessary
#      dependences and commands.  In other words, don't include
#      those it can figure out.
#
#Note: Remember to use tabs properly or the makefile won't work.
#
